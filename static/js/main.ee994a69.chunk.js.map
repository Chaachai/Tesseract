{"version":3,"sources":["Adria-logo.png","eng_bw.png","App.js","reportWebVitals.js","index.js"],"names":["ocrad","require","worker","Tesseract","createWorker","App","props","state","loading","loadingMessage","ocrResult","started","terminated","deviceOrientation","window","screen","orientation","angle","queuedImages","webcamRef","React","createRef","canvasRef","doOCR","bind","handleStart","loadTesseract","reset","pushCurrentImage","addEventListener","event","setState","target","console","log","a","i","this","length","recognize","text","data","current","video","readyState","canvas","videoWidth","videoHeight","width","height","ctx","getContext","drawImage","j","imageData","getImageData","index","red","green","blue","alpha","average","putImageData","currentImage","toDataURL","e","preventDefault","timesRun","interval","setInterval","clearInterval","load","loadLanguage","initialize","setParameters","tessedit_pageseg_mode","PSM","SINGLE_BLOCK","tessedit_ocr_engine_mode","OEM","TESSERACT_ONLY","Modal","show","onHide","className","keyboard","Body","Row","Col","xs","md","style","fontSize","Navbar","bg","variant","Brand","onClick","alt","src","logo","Container","fluid","sm","id","ref","muted","audio","videoConstraints","facingMode","aspectRatio","display","left","top","right","bottom","margin","disabled","onChange","name","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee994a69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.94b4bae1.png\";","export default __webpack_public_path__ + \"static/media/eng_bw.dfcc4bf3.png\";","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport Tesseract /*PSM, OEM, { createWorker, createScheduler }*/ from 'tesseract.js';\n// import { OCRAD } from 'ocrad.js';\nimport './App.css';\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from 'react-bootstrap';\nimport logo from './Adria-logo.png';\nimport engbw from './eng_bw.png';\n\nconst ocrad = require('async-ocrad');\n\n// const scheduler = Tesseract.createScheduler();\nconst worker = Tesseract.createWorker();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loading: false,\n      loadingMessage: \"\",\n      ocrResult: \"\",\n      started: true,\n      terminated: false,\n      // progress: 0,\n      deviceOrientation: window.screen.orientation.angle,\n      queuedImages: [],\n    }\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n\n    this.doOCR = this.doOCR.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.loadTesseract = this.loadTesseract.bind(this);\n    this.reset = this.reset.bind(this);\n    this.pushCurrentImage = this.pushCurrentImage.bind(this);\n\n    window.addEventListener('orientationchange', (event) => {\n      this.setState({deviceOrientation: event.target.screen.orientation.angle});\n      console.log(\"the orientation of the device is now \" + event.target.screen.orientation.angle);\n    });\n  }\n  componentDidMount() {\n    // this.loadTesseract();\n  }\n\n  async doOCR () {\n    for(let i = 0; i < this.state.queuedImages.length; i++) {\n      // const { data: { text } } = await scheduler.addJob('recognize', this.state.queuedImages[i]);\n      const { data: { text } } = await worker.recognize(this.state.queuedImages[i]);\n      if(text && text !== \"\" && text.length > 0) {\n        console.log(text);\n        this.setState({ocrResult: this.state.ocrResult + text});\n      }\n    }\n    console.log(\"FINISHED\");\n    this.setState({loading: false, loadingMessage: \"\"});\n  };\n  \n  pushCurrentImage() {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n      \n      const video = this.webcamRef.current.video;\n      const canvas = this.canvasRef.current;\n      \n      // Get Video Properties\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n      \n      // Set video width\n      // this.webcamRef.current.video.width = videoWidth;\n      // this.webcamRef.current.video.height = videoHeight;\n      \n      // Set canvas height and width\n      canvas.width = videoWidth;\n      canvas.height = videoHeight;\n      \n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      \n      let i=0;\n      let j=0;\n      let imageData = ctx.getImageData(0, 0, videoWidth, videoHeight);\n      for (i=0; i<imageData.height; i++) {\n        for (j=0; j<imageData.width; j++) {\n          let index = (i * 4) * imageData.width + (j * 4);\n          let red = imageData.data[index];\n          let green = imageData.data[index + 1];\n          let blue = imageData.data[index + 2];\n          let alpha = imageData.data[index + 3];\n          let average = (red + green + blue) / 3;\n          imageData.data[index] = average;\n          imageData.data[index + 1] = average;\n          imageData.data[index + 2] = average;\n          imageData.data[index + 3] = alpha;\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n\n      let currentImage = canvas.toDataURL('image/jpeg', 1.0);\n      this.setState({queuedImages: [...this.state.queuedImages, currentImage]});\n    }\n  };\n  \n  handleStart(e){\n    e.preventDefault();\n    this.setState({started: true}, () => {\n      let timesRun = 0;\n      let interval = setInterval(async () => {\n        if (timesRun === 3) {\n          // await scheduler.terminate();\n          clearInterval(interval);\n          this.setState({terminated: true, loading: true, loadingMessage: \"Getting the text....\"});\n          await this.doOCR();\n        }\n        // this.doOCR();\n        this.pushCurrentImage();\n        timesRun += 1;\n      }, 3000);\n    }); \n  }\n  \n  async loadTesseract() {\n    this.setState({loading: true, loadingMessage: \"Loading Tesseract...\"});\n      // for (let i = 0; i < 10; i++) {\n        // const worker = createWorker({\n        //   logger: m => {\n        //     // console.log(m);\n        //     this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n        //   }\n        // });\n      await worker.load();\n      await worker.loadLanguage('eng');\n      await worker.initialize('eng');\n      await worker.setParameters({tessedit_pageseg_mode: Tesseract.PSM.SINGLE_BLOCK, tessedit_ocr_engine_mode: Tesseract.OEM.TESSERACT_ONLY});\n      // scheduler.addWorker(worker);\n      // }\n      this.setState({loading: false, loadingMessage: \"\"});\n  }\n\n  async reset(e) {\n    e.preventDefault();\n    // await scheduler.terminate();\n    // this.setState({started: false, terminated: false, ocrResult: \"\"}, /*this.loadTesseract*/);\n\n\n\n\n\n    const video = this.webcamRef.current.video;\n    const canvas = this.canvasRef.current;\n    \n    // Get Video Properties\n    const videoWidth = this.webcamRef.current.video.videoWidth;\n    const videoHeight = this.webcamRef.current.video.videoHeight;\n    \n    // Set video width\n    // this.webcamRef.current.video.width = videoWidth;\n    // this.webcamRef.current.video.height = videoHeight;\n    \n    // Set canvas height and width\n    canvas.width = videoWidth;\n    canvas.height = videoHeight;\n    \n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n\n\n    const text = await ocrad(canvas);\n    console.log(text);\n    this.setState({ocrResult: text, terminated: true});\n  }\n  \n  render() {\n    const videoConstraintsPortrait = {\n      width: 720, /*{ min: 400, ideal: 1080 },*/\n      height: 1280, /*{ min: 640, ideal: 1920, max: 1920 },*/\n      facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      // frameRate: { max: 30 },\n    };\n\n    const videoConstraintsLandscape = {\n      height: 720, /*{ min: 400, ideal: 1080 },*/\n      width: 1280, /*{ min: 640, ideal: 1920, max: 1920 },*/\n      facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      // frameRate: { max: 30 },\n    };\n\n    return (\n      <div>\n        <Modal show={this.state.loading} onHide={()=>{}} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n              <Row>\n                  <Col xs={12} md={12}>\n                      <div className=\"spinner\">\n                          <span style={{fontSize: '11px'}}>{this.state.loadingMessage}</span>\n                      </div>\n                  </Col>\n              </Row>\n          </Modal.Body>\n        </Modal>\n\n        {this.state.deviceOrientation === 0 &&\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand onClick={(e) => {/*this.doOCR();*/ this.reset(e)}}>\n            <img\n            alt=\"\"\n            src={logo}\n            width=\"135\"\n            height=\"43\"\n            className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n        </Navbar>\n        }\n        <Container fluid>\n        {this.state.started === true ?\n        <div>\n          {this.state.terminated === false ?\n          <Row>\n            <Col sm=\"12\">\n              <Webcam \n                id=\"myCam\"\n                ref={this.webcamRef}\n                muted={true}\n                audio={false} \n                // height={1280}\n                // width={720}\n                // screenshotFormat=\"image/png\"\n                videoConstraints={this.state.deviceOrientation === 0 ? videoConstraintsPortrait : videoConstraintsLandscape}\n                // forceScreenshotSourceSize=\"true\"\n                style={{width: \"100%\"}} \n                />\n                <canvas\n                id=\"myCanvas\"\n                ref={this.canvasRef}\n                style={{\n                  // backgroundColor: \"red\",\n                  display: \"none\",\n                  left: 0,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  width: \"100%\",\n                  height: \"auto\",\n                }}\n              />\n            </Col>\n          </Row>\n          :\n          <Row>\n            <Col>\n              <div >\n              <textarea \n                style={{\n                  margin: \"5px 0\",\n                  width:\"100%\", \n                  height: \"382px\",\n                  fontSize: \"13px\"\n                }}\n                disabled\n                onChange={(e) =>{console.log(e.target.name)} }\n                value={this.state.ocrResult} />\n              </div>\n            </Col>\n          </Row>\n          }\n        </div>\n        : \n        <Row>\n          <Col>\n            <div className=\"startBtnWrapper\" >\n              <button className=\"startBtn\" onClick={(e) => {this.handleStart(e);}} >START</button>\n            </div>\n          </Col>\n        </Row>\n        }\n        {this.state.deviceOrientation === 0 &&\n        <Row className=\"footer\">\n          <Col>\n            <p>Adria Business & Technology</p>\n            <p>2021 © All rights reserved</p>\n          </Col>\n        </Row> \n        }\n        </Container>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}