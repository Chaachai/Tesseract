{"version":3,"sources":["Adria-logo.png","App.js","reportWebVitals.js","index.js"],"names":["scheduler","createScheduler","App","props","webcamRef","React","createRef","canvasRef","state","loading","loadingMessage","ocrResult","started","terminated","doOCR","bind","handleStart","loadTesseract","this","setState","a","current","video","readyState","canvas","videoWidth","videoHeight","width","height","getContext","drawImage","i","worker","createWorker","logger","m","console","log","progress","toFixed","load","loadLanguage","initialize","addWorker","document","getElementById","addEventListener","e","preventDefault","timesRun","interval","setInterval","terminate","clearInterval","Modal","show","onHide","className","keyboard","Body","Row","Col","xs","md","style","fontSize","Navbar","bg","variant","Brand","onClick","alt","src","logo","Container","fluid","id","ref","muted","audio","videoConstraints","facingMode","zindex","margin","disabled","onChange","target","name","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.75fbb92c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.94b4bae1.png\";","import React, { Component } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as cocossd from \"@tensorflow-models/coco-ssd\";\nimport Webcam from \"react-webcam\";\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport { drawRect } from \"./utilities\";\nimport './App.css';\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from 'react-bootstrap';\nimport logo from './Adria-logo.png';\n\nconst scheduler = createScheduler();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n    this.state = {\n      loading: true,\n      loadingMessage: \"Loading...\",\n      // cocoActive: false,\n      // ocrActive: false,\n      // imageSrc: \"\",\n      ocrResult: \"\",\n      started: true,\n      terminated: false,\n      // progress: 0,\n    }\n    this.doOCR = this.doOCR.bind(this);\n    // this.runCoco = this.runCoco.bind(this);\n    // this.detect = this.detect.bind(this);\n    // this.handleObjectDetectionClick = this.handleObjectDetectionClick.bind(this);\n    // this.handleTesseractStart = this.handleTesseractStart.bind(this);\n    // this.handleTesseractStop = this.handleTesseractStop.bind(this);\n    // this.handleCaptureClick = this.handleCaptureClick.bind(this);\n    // this.handleRetryClick = this.handleRetryClick.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.loadTesseract = this.loadTesseract.bind(this);\n  }\n\n  // async runCoco() {\n  //   this.setState({loadingMessage: 'Loading the model...', loading: true});\n  //   const net = await cocossd.load();\n  //   console.log(\"Handpose model loaded.\");\n  //   this.setState({loadingMessage: 'Loading...', loading: false});\n  //   //  Loop and detect hands\n  //   setInterval(() => {\n  //     if(this.state.cocoActive === true && this.state.ocrActive === false) this.detect(net);\n  //   }, 10);\n  // };\n\n  // async detect(net) {\n  //   // console.log(this.webcamRef.current.video);\n  //   // console.log(this.webcamRef.current.video.readyState);\n  //   // debugger;\n  //   //Check data is available\n  //   if (\n  //     typeof this.webcamRef.current !== \"undefined\" &&\n  //     this.webcamRef.current !== null &&\n  //     this.webcamRef.current.video.readyState === 4\n  //   ) {\n  //     // Get Video Properties\n  //     const video = this.webcamRef.current.video;\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     this.canvasRef.current.width = videoWidth;\n  //     this.canvasRef.current.height = videoHeight;\n\n  //     // Make Detections\n  //     const obj = await net.detect(video);\n\n  //     // console.log(obj);\n\n  //     // Draw mesh\n  //     const ctx = this.canvasRef.current.getContext(\"2d\");\n  //     drawRect(obj, ctx); \n  //   } \n  // };\n\n  componentDidMount() {\n    this.setState({loading: false, loadingMessage: ''});\n    // this.runCoco();\n    \n      \n  //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n\n    // (async () => {\n    //   this.setState({loading: true, })\n    //   for (let i = 0; i < 4; i++) {\n    //     const worker = createWorker({\n    //       logger: m => {\n    //         // console.log(m);\n    //         this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n    //       }\n    //     });\n    //     await worker.load();\n    //     await worker.loadLanguage('fra');\n    //     await worker.initialize('fra');\n    //     scheduler.addWorker(worker);\n    //   }\n\n    //   this.setState({loading: false,})\n    //   timerId = setInterval(this.doOCR, 150);\n\n    //   // clearInterval(timerId);\n    // })();\n\n  }\n\n  // setWebcamRef(webcamRef) {\n  //   this.setState({webcamRef: webcamRef})\n  // }\n\n  // setCanvasRef(canvasRef) {\n  //   this.setState({canvasRef: canvasRef})\n  // }\n\n  \n\n  async doOCR () {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n    // if (this.state.imageSrc !== null && this.state.imageSrc !== \"\") {\n\n      const video = this.webcamRef.current.video;\n      const canvas = this.canvasRef.current;\n\n       // Get Video Properties\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n\n      // Set video width\n      this.webcamRef.current.video.width = videoWidth;\n      this.webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvas.width = videoWidth;\n      canvas.height = videoHeight;\n\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      \n      // const { data: { text } } = await scheduler.addJob('recognize', canvas);\n\n      // // text.split('\\n').forEach((line) => {\n      // if(text && text !== \"\" && text.length > 0){\n      //   this.setState({ocrResult: text});\n      // }\n      // });\n\n      // const worker = createWorker();\n      // this.setState({loading: true, })\n      // const worker = createWorker({\n      //   logger: m => {\n      //     console.log(m);\n      //     this.setState({loadingMessage: m.status + \"... \" + (m.progress * 100).toFixed(1) + \"%\" });\n      //   }\n      // });\n      // await worker.load();\n      // await worker.loadLanguage('fra');\n      // await worker.initialize('fra');\n      // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n      // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n    }\n  };\n\n  async runOcr () {\n    this.setState({loading: true, })\n    for (let i = 0; i < 4; i++) {\n      const worker = createWorker({\n        logger: m => {\n          console.log(m);\n          this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n        }\n      });\n      await worker.load();\n      await worker.loadLanguage('fra');\n      await worker.initialize('fra');\n      scheduler.addWorker(worker);\n    }\n    this.setState({loading: false,});\n\n    document.getElementById(\"startBtn\").addEventListener(\"click\", ()=>{\n      console.log(\"STAR !!!\");\n      // timerId = setInterval(this.doOCR, 100);\n    });\n    \n    document.getElementById(\"stopBtn\").addEventListener(\"click\", ()=>{\n      // clearInterval(timerId);\n    });\n\n    \n\n      // clearInterval(timerId);\n  };\n  \n  // stopOcr () {\n  //   clearInterval(timerId);\n  //   worker.terminate();\n  // };\n\n  // handleObjectDetectionClick(e){\n  //   e.preventDefault();\n  //   this.setState({cocoActive: true, ocrActive: false, imageSrc: \"\"}, this.runCoco);\n  // }\n\n  // handleTesseractStart(e){\n  //   e.preventDefault();\n  //   this.setState({started: true}, this.runOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  // handleTesseractStop(e){\n  //   e.preventDefault();\n  //   // this.runOcr();\n  //   this.setState({started: false}, this.stopOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  handleStart(e){\n    e.preventDefault();\n    // this.runOcr();\n    this.setState({loading: true}, this.loadTesseract);\n    // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  }\n  \n  async loadTesseract() {\n    for (let i = 0; i < 4; i++) {\n      const worker = createWorker();\n      await worker.load();\n      await worker.loadLanguage('fra');\n      await worker.initialize('fra');\n      scheduler.addWorker(worker);\n      if(i === 2){\n        this.setState({started: true,});\n      }\n    }\n    this.setState({loading: false});\n\n    let timesRun = 0;\n    let interval = setInterval(async () => {\n      timesRun += 1;\n      if (timesRun === 200) {\n        await scheduler.terminate();\n        clearInterval(interval);\n        this.setState({terminated: true});\n      }\n      this.doOCR();\n    }, 200); \n\n    // setInterval(this.doOCR, 200);\n  }\n  \n  // handleCaptureClick(e){\n  //   e.preventDefault();\n  //   let imageSrc = this.webcamRef.current.getScreenshot();\n  //   console.log(\"imageSrc === \", imageSrc);\n  //   this.setState({imageSrc: imageSrc, ocrResult: \"\"}, this.doOCR);\n  // }\n  \n  // handleRetryClick(e){\n  //   e.preventDefault();\n  //   this.setState({imageSrc: \"\", ocrActive: true, cocoActive: false});\n  // }\n\n  render() {\n    const videoConstraints = {\n      // width: 720,\n      // height: 1280,\n      facingMode: \"environment\",\n      // aspectRatio: 0.6666666667\n    };\n    return (\n      <div>\n        <Modal show={this.state.loading} onHide={()=>{}} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n              <Row>\n                  <Col xs={12} md={12}>\n                      <div className=\"spinner\">\n                          <span style={{fontSize: '11px'}}>{this.state.loadingMessage}</span>\n                      </div>\n                  </Col>\n              </Row>\n          </Modal.Body>\n        </Modal>\n\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand onClick={(e) => {e.preventDefault(); this.doOCR();/**this.setState({started: false, terminated: false, ocrResult: \"\"})*/}}>\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"135\"\n              height=\"43\"\n              className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n          {/* <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav>\n            <NavDropdown title=\"Tesseract JS\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Tesseract JS</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Tenserflow JS</NavDropdown.Item>\n            </NavDropdown>\n            </Nav>\n          </Navbar.Collapse> */}\n        </Navbar>\n\n        <Container fluid>\n          {this.state.started === true ?\n          <div>\n            {this.state.terminated === false ?\n            <Row>\n              <Col /*sm=\"12\" md=\"4\"*/>\n                <div >\n                  <div /*style={{position: \"relative\", display: \"inline-block\"}}*/>\n                    <Webcam \n                      id=\"myCam\"\n                      ref={this.webcamRef}\n                      muted={true}\n                      audio={false} \n                      // height={1280}\n                      // width={720}\n                      // screenshotFormat=\"image/png\"\n                      videoConstraints={videoConstraints}\n                      // forceScreenshotSourceSize=\"true\"\n                      style={{\n                        // margin: \"2px 0\",\n                        // display: \"none\",\n                        // opacity: \"20%\",\n                        // position: \"absolute\",\n                        // marginLeft: \"auto\",\n                        // marginRight: \"auto\",\n                        // left: 0,\n                        // right: 0,\n                        // textAlign: \"center\",\n                        zindex: 9,\n                        width: \"100%\",\n                        height: \"auto\",\n                      }} \n                      />\n                  </div>\n                  {/* <div style={{width: \"100%\",}}>\n                    <canvas\n                        id=\"myCanvas\"\n                        ref={this.canvasRef}\n                        style={{\n                          backgroundColor: \"red\",\n                          // display: \"none\",\n                          position: \"absolute\",\n                          // marginLeft: \"auto\",\n                          // marginRight: \"auto\",\n                          left: 0,\n                          top: 0,\n                          right: 0,\n                          bottom: 0,\n                          // textAlign: \"center\",\n                          zindex: 10,\n                          width: \"100%\",\n                          // height: \"100%\",\n                        }}\n                      />\n                  </div> */}\n                </div>\n              </Col>\n            </Row>\n            :\n            <Row>\n              <Col>\n                  <div >\n                  <textarea \n                    style={{\n                      margin: \"5px 0\",\n                      width:\"100%\", \n                      height: \"382px\",\n                      fontSize: \"13px\"\n                    }}\n                    disabled\n                    onChange={(e) =>{console.log(e.target.name)} }\n                    value={this.state.ocrResult} />\n                  </div>\n                </Col>\n            </Row>\n            }\n          </div>\n          : \n          <Row>\n            <Col>\n              <div className=\"startBtnWrapper\" >\n                <button className=\"startBtn\" onClick={(e) => {this.handleStart(e);}} >START</button>\n              </div>\n            </Col>\n          </Row>\n          }\n          \n        </Container>\n        \n        {/* <Row className=\"footer\">\n          <Col>\n            <p>Adria Business & Technology</p>\n            <p>2021 © All rights reserved</p>\n          </Col>\n        </Row> */}\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}