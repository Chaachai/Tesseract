{"version":3,"sources":["Adria-logo.png","App.js","reportWebVitals.js","index.js"],"names":["scheduler","createScheduler","worker","createWorker","App","props","state","loading","loadingMessage","ocrResult","started","terminated","deviceOrientation","window","screen","orientation","angle","webcamRef","React","createRef","canvasRef","doOCR","bind","handleStart","loadTesseract","addEventListener","event","setState","target","console","log","a","i","load","loadLanguage","initialize","addWorker","this","current","video","readyState","canvas","videoWidth","videoHeight","width","height","getContext","drawImage","addJob","text","data","length","e","preventDefault","timesRun","interval","setInterval","terminate","clearInterval","Modal","show","onHide","className","keyboard","Body","Row","Col","xs","md","style","fontSize","Navbar","bg","variant","Brand","onClick","alt","src","logo","Container","fluid","sm","id","ref","muted","audio","videoConstraints","min","ideal","max","facingMode","aspectRatio","frameRate","left","top","right","bottom","margin","disabled","onChange","name","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f19cb8ef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.94b4bae1.png\";","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\nimport { createWorker, createScheduler } from 'tesseract.js';\nimport './App.css';\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from 'react-bootstrap';\nimport logo from './Adria-logo.png';\n\nconst scheduler = createScheduler();\nconst worker = createWorker();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loading: false,\n      loadingMessage: \"\",\n      // cocoActive: false,\n      // ocrActive: false,\n      // imageSrc: \"\",\n      ocrResult: \"\",\n      started: false,\n      terminated: false,\n      // progress: 0,\n      deviceOrientation: window.screen.orientation.angle,\n    }\n    this.webcamRef = React.createRef(null);\n    this.canvasRef = React.createRef(null);\n\n   \n    // this.handleTesseractStart = this.handleTesseractStart.bind(this);\n    // this.handleTesseractStop = this.handleTesseractStop.bind(this);\n    // this.handleCaptureClick = this.handleCaptureClick.bind(this);\n    // this.handleRetryClick = this.handleRetryClick.bind(this);\n    this.doOCR = this.doOCR.bind(this);\n    this.handleStart = this.handleStart.bind(this);\n    this.loadTesseract = this.loadTesseract.bind(this);\n\n    window.addEventListener('orientationchange', (event) => {\n      this.setState({deviceOrientation: event.target.screen.orientation.angle});\n      console.log(\"the orientation of the device is now \" + event.target.screen.orientation.angle);\n    });\n  }\n\n\n  // async detect(net) {\n  //   // console.log(this.webcamRef.current.video);\n  //   // console.log(this.webcamRef.current.video.readyState);\n  //   // debugger;\n  //   //Check data is available\n  //   if (\n  //     typeof this.webcamRef.current !== \"undefined\" &&\n  //     this.webcamRef.current !== null &&\n  //     this.webcamRef.current.video.readyState === 4\n  //   ) {\n  //     // Get Video Properties\n  //     const video = this.webcamRef.current.video;\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     this.canvasRef.current.width = videoWidth;\n  //     this.canvasRef.current.height = videoHeight;\n\n  //     // Make Detections\n  //     const obj = await net.detect(video);\n\n  //     // console.log(obj);\n\n  //     // Draw mesh\n  //     const ctx = this.canvasRef.current.getContext(\"2d\");\n  //     drawRect(obj, ctx); \n  //   } \n  // };\n\n  componentDidMount() {\n    // this.setState({loading: false, loadingMessage: ''});\n      \n  //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n\n    (async () => {\n      this.setState({loading: true, loadingMessage: \"Loading Tesseract...\"});\n      for (let i = 0; i < 4; i++) {\n        // const worker = createWorker({\n        //   logger: m => {\n        //     // console.log(m);\n        //     this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n        //   }\n        // });\n        await worker.load();\n        await worker.loadLanguage('fra');\n        await worker.initialize('fra');\n        scheduler.addWorker(worker);\n      }\n\n      this.setState({loading: false,})\n      // timerId = setInterval(this.doOCR, 150);\n\n      // clearInterval(timerId);\n    })();\n\n  }\n\n  async doOCR () {\n    if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n    // if (this.state.imageSrc !== null && this.state.imageSrc !== \"\") {\n\n      const video = this.webcamRef.current.video;\n      const canvas = this.canvasRef.current;\n\n       // Get Video Properties\n      const videoWidth = this.webcamRef.current.video.videoWidth;\n      const videoHeight = this.webcamRef.current.video.videoHeight;\n\n      // Set video width\n      // this.webcamRef.current.video.width = videoWidth;\n      // this.webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvas.width = videoWidth;\n      canvas.height = videoHeight;\n\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      \n      const { data: { text } } = await scheduler.addJob('recognize', canvas);\n\n      // // text.split('\\n').forEach((line) => {\n      if(text && text !== \"\" && text.length > 0) {\n        console.log(text);\n        this.setState({ocrResult: this.state.ocrResult + text});\n      }\n      // });\n\n      // const worker = createWorker();\n      // this.setState({loading: true, })\n      // const worker = createWorker({\n      //   logger: m => {\n      //     console.log(m);\n      //     this.setState({loadingMessage: m.status + \"... \" + (m.progress * 100).toFixed(1) + \"%\" });\n      //   }\n      // });\n      // await worker.load();\n      // await worker.loadLanguage('fra');\n      // await worker.initialize('fra');\n      // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n      // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n    }\n  };\n\n  // async runOcr () {\n  //   this.setState({loading: true, })\n  //   for (let i = 0; i < 4; i++) {\n  //     const worker = createWorker({\n  //       logger: m => {\n  //         console.log(m);\n  //         this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n  //       }\n  //     });\n  //     await worker.load();\n  //     await worker.loadLanguage('fra');\n  //     await worker.initialize('fra');\n  //     scheduler.addWorker(worker);\n  //   }\n  //   this.setState({loading: false,});\n\n  //   document.getElementById(\"startBtn\").addEventListener(\"click\", ()=>{\n  //     console.log(\"STAR !!!\");\n  //     // timerId = setInterval(this.doOCR, 100);\n  //   });\n    \n  //   document.getElementById(\"stopBtn\").addEventListener(\"click\", ()=>{\n  //     // clearInterval(timerId);\n  //   });\n\n    \n\n  //     // clearInterval(timerId);\n  // };\n  \n  // stopOcr () {\n  //   clearInterval(timerId);\n  //   worker.terminate();\n  // };\n\n  // handleObjectDetectionClick(e){\n  //   e.preventDefault();\n  //   this.setState({cocoActive: true, ocrActive: false, imageSrc: \"\"}, this.runCoco);\n  // }\n\n  // handleTesseractStart(e){\n  //   e.preventDefault();\n  //   this.setState({started: true}, this.runOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  // handleTesseractStop(e){\n  //   e.preventDefault();\n  //   // this.runOcr();\n  //   this.setState({started: false}, this.stopOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  handleStart(e){\n    e.preventDefault();\n    // this.runOcr();\n    this.setState({started: true, loading: true}, this.loadTesseract);\n    \n    // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  }\n  \n  async loadTesseract() {\n    \n    // for (let i = 0; i < 4; i++) {\n      // const worker = createWorker();\n      // await worker.load();\n      // await worker.loadLanguage('fra');\n      // await worker.initialize('fra');\n      // scheduler.addWorker(worker);\n      // if(i === 2){\n        // this.setState({started: true,});\n      // }\n    // }\n    this.setState({loading: false});\n\n    let timesRun = 0;\n    let interval = setInterval(async () => {\n      timesRun += 1;\n      if (timesRun === 200) {\n        await scheduler.terminate();\n        clearInterval(interval);\n        this.setState({terminated: true});\n      }\n      this.doOCR();\n    }, 200); \n\n    // setInterval(this.doOCR, 200);\n  }\n  \n  // handleCaptureClick(e){\n  //   e.preventDefault();\n  //   let imageSrc = this.webcamRef.current.getScreenshot();\n  //   console.log(\"imageSrc === \", imageSrc);\n  //   this.setState({imageSrc: imageSrc, ocrResult: \"\"}, this.doOCR);\n  // }\n  \n  // handleRetryClick(e){\n  //   e.preventDefault();\n  //   this.setState({imageSrc: \"\", ocrActive: true, cocoActive: false});\n  // }\n\n  render() {\n    const videoConstraintsPortrait = {\n      width: { min: 400, ideal: 1080 },\n      height: { min: 640, ideal: 1920, max: 1920 },\n      facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      frameRate: { max: 30 },\n    };\n\n    const videoConstraintsLandscape = {\n      width: { min: 640, ideal: 1920, max: 1920 },\n      height: { min: 400, ideal: 1080 },\n      facingMode: \"environment\",\n      aspectRatio: 1.777777778,\n      frameRate: { max: 30 },\n    };\n\n    return (\n      <div>\n        <Modal show={this.state.loading} onHide={()=>{}} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n              <Row>\n                  <Col xs={12} md={12}>\n                      <div className=\"spinner\">\n                          <span style={{fontSize: '11px'}}>{this.state.loadingMessage}</span>\n                      </div>\n                  </Col>\n              </Row>\n          </Modal.Body>\n        </Modal>\n\n        {this.state.deviceOrientation === 0 &&\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand onClick={(e) => {e.preventDefault(); this.doOCR(); /*this.setState({started: false, terminated: false, ocrResult: \"\"})*/}}>\n            <img\n            alt=\"\"\n            src={logo}\n            width=\"135\"\n            height=\"43\"\n            className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n        </Navbar>\n        }\n        <Container fluid>\n        {this.state.started === true ?\n        <div>\n          {this.state.terminated === false ?\n          <Row>\n            <Col sm=\"12\">\n              <Webcam \n                id=\"myCam\"\n                ref={this.webcamRef}\n                muted={true}\n                audio={false} \n                // height={1280}\n                // width={720}\n                // screenshotFormat=\"image/png\"\n                videoConstraints={this.state.deviceOrientation === 0 ? videoConstraintsPortrait : videoConstraintsLandscape}\n                // forceScreenshotSourceSize=\"true\"\n                style={{\n                  // margin: \"2px 0\",\n                  // display: \"none\",\n                  // opacity: \"20%\",\n                  // position: \"absolute\",\n                  // marginLeft: \"auto\",\n                  // marginRight: \"auto\",\n                  // left: 0,\n                  // right: 0,\n                  // textAlign: \"center\",\n                  // zIndex: 9,\n                  width: \"100%\",\n                  // height: \"auto\",\n                }} \n                />\n                <canvas\n                id=\"myCanvas\"\n                ref={this.canvasRef}\n                style={{\n                  // backgroundColor: \"red\",\n                  // display: \"none\",\n                  // position: \"absolute\",\n                  // marginLeft: \"auto\",\n                  // marginRight: \"auto\",\n                  left: 0,\n                  top: 0,\n                  right: 0,\n                  bottom: 0,\n                  // textAlign: \"center\",\n                  // zIndex: 10,\n                  width: \"100%\",\n                  height: \"auto\",\n                }}\n              />\n            </Col>\n          </Row>\n          :\n          <Row>\n            <Col>\n              <div >\n              <textarea \n                style={{\n                  margin: \"5px 0\",\n                  width:\"100%\", \n                  height: \"382px\",\n                  fontSize: \"13px\"\n                }}\n                disabled\n                onChange={(e) =>{console.log(e.target.name)} }\n                value={this.state.ocrResult} />\n              </div>\n            </Col>\n          </Row>\n          }\n        </div>\n        : \n        <Row>\n          <Col>\n            <div className=\"startBtnWrapper\" >\n              <button className=\"startBtn\" onClick={(e) => {this.handleStart(e);}} >START</button>\n            </div>\n          </Col>\n        </Row>\n        }\n        {this.state.deviceOrientation === 0 &&\n        <Row className=\"footer\">\n          <Col>\n            <p>Adria Business & Technology</p>\n            <p>2021 © All rights reserved.</p>\n          </Col>\n        </Row> \n        }\n        </Container>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}