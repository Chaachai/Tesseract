{"version":3,"sources":["Adria-logo.png","App.js","reportWebVitals.js","index.js"],"names":["App","props","webcamRef","React","createRef","state","Navbar","bg","variant","Brand","onClick","e","preventDefault","alt","src","logo","width","height","className","Container","fluid","Row","Col","sm","id","ref","this","muted","audio","videoConstraints","facingMode","style","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4SAAe,MAA0B,uC,OCwBpBA,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,UAAYC,IAAMC,UAAU,MAEjC,EAAKC,MAAQ,GAJG,E,0CA4OlB,WAOE,OACE,gCAaE,cAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAA3B,SACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,QAAS,SAACC,GAAOA,EAAEC,kBAAjC,SACE,qBACEC,IAAI,GACJC,IAAKC,EACLC,MAAM,MACNC,OAAO,KACPC,UAAU,iCAIhB,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,SACE,cAAC,IAAD,CACEC,GAAG,QACHC,IAAKC,KAAKxB,UACVyB,OAAO,EACPC,OAAO,EAIPC,iBA1Ca,CACvBb,MAAO,IACPC,OAAQ,KACRa,WAAY,eAyCFC,MAAO,CAWLf,MAAO,uB,GArSQgB,aCZlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b3e8fa14.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Adria-logo.94b4bae1.png\";","import React, { Component } from 'react';\nimport Webcam from \"react-webcam\";\n// import { createWorker, createScheduler } from 'tesseract.js';\nimport './App.css';\nimport {\n  Row,\n  Col,\n  Container,\n  Nav,\n  Navbar,\n  NavDropdown,\n  Modal,\n  Button\n} from 'react-bootstrap';\nimport logo from './Adria-logo.png';\n\n// const scheduler = createScheduler();\n\n// const worker = createWorker({\n//   logger: m => console.log(m),\n// });\n\n// let timerId = null;\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.webcamRef = React.createRef(null);\n    // this.canvasRef = React.createRef(null);\n    this.state = {\n      // loading: true,\n      // loadingMessage: \"Loading...\",\n      // cocoActive: false,\n      // ocrActive: false,\n      // imageSrc: \"\",\n      // ocrResult: \"\",\n      // started: true,\n      // terminated: false,\n      // progress: 0,\n    }\n    // this.doOCR = this.doOCR.bind(this);\n    // this.runCoco = this.runCoco.bind(this);\n    // this.detect = this.detect.bind(this);\n    // this.handleObjectDetectionClick = this.handleObjectDetectionClick.bind(this);\n    // this.handleTesseractStart = this.handleTesseractStart.bind(this);\n    // this.handleTesseractStop = this.handleTesseractStop.bind(this);\n    // this.handleCaptureClick = this.handleCaptureClick.bind(this);\n    // this.handleRetryClick = this.handleRetryClick.bind(this);\n    // this.handleStart = this.handleStart.bind(this);\n    // this.loadTesseract = this.loadTesseract.bind(this);\n  }\n\n\n  // async detect(net) {\n  //   // console.log(this.webcamRef.current.video);\n  //   // console.log(this.webcamRef.current.video.readyState);\n  //   // debugger;\n  //   //Check data is available\n  //   if (\n  //     typeof this.webcamRef.current !== \"undefined\" &&\n  //     this.webcamRef.current !== null &&\n  //     this.webcamRef.current.video.readyState === 4\n  //   ) {\n  //     // Get Video Properties\n  //     const video = this.webcamRef.current.video;\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     this.canvasRef.current.width = videoWidth;\n  //     this.canvasRef.current.height = videoHeight;\n\n  //     // Make Detections\n  //     const obj = await net.detect(video);\n\n  //     // console.log(obj);\n\n  //     // Draw mesh\n  //     const ctx = this.canvasRef.current.getContext(\"2d\");\n  //     drawRect(obj, ctx); \n  //   } \n  // };\n\n  // componentDidMount() {\n  //   this.setState({loading: false, loadingMessage: ''});\n      \n  // //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  // //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n\n  //   // (async () => {\n  //   //   this.setState({loading: true, })\n  //   //   for (let i = 0; i < 4; i++) {\n  //   //     const worker = createWorker({\n  //   //       logger: m => {\n  //   //         // console.log(m);\n  //   //         this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n  //   //       }\n  //   //     });\n  //   //     await worker.load();\n  //   //     await worker.loadLanguage('fra');\n  //   //     await worker.initialize('fra');\n  //   //     scheduler.addWorker(worker);\n  //   //   }\n\n  //   //   this.setState({loading: false,})\n  //   //   timerId = setInterval(this.doOCR, 150);\n\n  //   //   // clearInterval(timerId);\n  //   // })();\n\n  // }\n\n  // async doOCR () {\n  //   if (typeof this.webcamRef.current !== \"undefined\" && this.webcamRef.current !== null && this.webcamRef.current.video.readyState === 4) {\n  //   // if (this.state.imageSrc !== null && this.state.imageSrc !== \"\") {\n\n  //     const video = this.webcamRef.current.video;\n  //     const canvas = this.canvasRef.current;\n\n  //      // Get Video Properties\n  //     const videoWidth = this.webcamRef.current.video.videoWidth;\n  //     const videoHeight = this.webcamRef.current.video.videoHeight;\n\n  //     // Set video width\n  //     this.webcamRef.current.video.width = videoWidth;\n  //     this.webcamRef.current.video.height = videoHeight;\n\n  //     // Set canvas height and width\n  //     canvas.width = videoWidth;\n  //     canvas.height = videoHeight;\n\n  //     const ctx = canvas.getContext(\"2d\");\n  //     ctx.drawImage(video, 0, 0, videoWidth, videoHeight);\n      \n  //     // const { data: { text } } = await scheduler.addJob('recognize', canvas);\n\n  //     // // text.split('\\n').forEach((line) => {\n  //     // if(text && text !== \"\" && text.length > 0){\n  //     //   this.setState({ocrResult: text});\n  //     // }\n  //     // });\n\n  //     // const worker = createWorker();\n  //     // this.setState({loading: true, })\n  //     // const worker = createWorker({\n  //     //   logger: m => {\n  //     //     console.log(m);\n  //     //     this.setState({loadingMessage: m.status + \"... \" + (m.progress * 100).toFixed(1) + \"%\" });\n  //     //   }\n  //     // });\n  //     // await worker.load();\n  //     // await worker.loadLanguage('fra');\n  //     // await worker.initialize('fra');\n  //     // const { data: { text } } = await worker.recognize(this.state.imageSrc);\n  //     // this.setState({ocrResult: text, loading: false, loadingMessage: \"\"});\n  //   }\n  // };\n\n  // async runOcr () {\n  //   this.setState({loading: true, })\n  //   for (let i = 0; i < 4; i++) {\n  //     const worker = createWorker({\n  //       logger: m => {\n  //         console.log(m);\n  //         this.setState({loadingMessage: \"Loading.. \" + (m.progress * 100).toFixed(1) + \"%\" });\n  //       }\n  //     });\n  //     await worker.load();\n  //     await worker.loadLanguage('fra');\n  //     await worker.initialize('fra');\n  //     scheduler.addWorker(worker);\n  //   }\n  //   this.setState({loading: false,});\n\n  //   document.getElementById(\"startBtn\").addEventListener(\"click\", ()=>{\n  //     console.log(\"STAR !!!\");\n  //     // timerId = setInterval(this.doOCR, 100);\n  //   });\n    \n  //   document.getElementById(\"stopBtn\").addEventListener(\"click\", ()=>{\n  //     // clearInterval(timerId);\n  //   });\n\n    \n\n  //     // clearInterval(timerId);\n  // };\n  \n  // stopOcr () {\n  //   clearInterval(timerId);\n  //   worker.terminate();\n  // };\n\n  // handleObjectDetectionClick(e){\n  //   e.preventDefault();\n  //   this.setState({cocoActive: true, ocrActive: false, imageSrc: \"\"}, this.runCoco);\n  // }\n\n  // handleTesseractStart(e){\n  //   e.preventDefault();\n  //   this.setState({started: true}, this.runOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  // handleTesseractStop(e){\n  //   e.preventDefault();\n  //   // this.runOcr();\n  //   this.setState({started: false}, this.stopOcr);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  // handleStart(e){\n  //   e.preventDefault();\n  //   // this.runOcr();\n  //   this.setState({loading: true}, this.loadTesseract);\n  //   // this.setState({cocoActive: false, ocrActive: true, imageSrc: \"\"}, this.runOcr);\n  // }\n  \n  // async loadTesseract() {\n  //   for (let i = 0; i < 4; i++) {\n  //     const worker = createWorker();\n  //     await worker.load();\n  //     await worker.loadLanguage('fra');\n  //     await worker.initialize('fra');\n  //     scheduler.addWorker(worker);\n  //     if(i === 2){\n  //       this.setState({started: true,});\n  //     }\n  //   }\n  //   this.setState({loading: false});\n\n  //   let timesRun = 0;\n  //   let interval = setInterval(async () => {\n  //     timesRun += 1;\n  //     if (timesRun === 200) {\n  //       await scheduler.terminate();\n  //       clearInterval(interval);\n  //       this.setState({terminated: true});\n  //     }\n  //     this.doOCR();\n  //   }, 200); \n\n  //   // setInterval(this.doOCR, 200);\n  // }\n  \n  // handleCaptureClick(e){\n  //   e.preventDefault();\n  //   let imageSrc = this.webcamRef.current.getScreenshot();\n  //   console.log(\"imageSrc === \", imageSrc);\n  //   this.setState({imageSrc: imageSrc, ocrResult: \"\"}, this.doOCR);\n  // }\n  \n  // handleRetryClick(e){\n  //   e.preventDefault();\n  //   this.setState({imageSrc: \"\", ocrActive: true, cocoActive: false});\n  // }\n\n  render() {\n    const videoConstraints = {\n      width: 720,\n      height: 1280,\n      facingMode: \"environment\",\n      // aspectRatio: 1.777777778\n    };\n    return (\n      <div>\n        {/* <Modal show={this.state.loading} onHide={()=>{}} className=\"loadingModal\" keyboard={false}>\n          <Modal.Body>\n              <Row>\n                  <Col xs={12} md={12}>\n                      <div className=\"spinner\">\n                          <span style={{fontSize: '11px'}}>{this.state.loadingMessage}</span>\n                      </div>\n                  </Col>\n              </Row>\n          </Modal.Body>\n        </Modal> */}\n\n        <Navbar bg=\"light\" variant=\"light\">\n          <Navbar.Brand onClick={(e) => {e.preventDefault(); /**this.doOCR();this.setState({started: false, terminated: false, ocrResult: \"\"})*/}}>\n            <img\n              alt=\"\"\n              src={logo}\n              width=\"135\"\n              height=\"43\"\n              className=\"d-inline-block align-top\"\n            />\n          </Navbar.Brand>\n        </Navbar>\n        <Container fluid>\n          <Row>\n            <Col sm=\"12\">\n              <Webcam \n                id=\"myCam\"\n                ref={this.webcamRef}\n                muted={true}\n                audio={false} \n                // height={1280}\n                // width={720}\n                // screenshotFormat=\"image/png\"\n                videoConstraints={videoConstraints}\n                // forceScreenshotSourceSize=\"true\"\n                style={{\n                  // margin: \"2px 0\",\n                  // display: \"none\",\n                  // opacity: \"20%\",\n                  // position: \"absolute\",\n                  // marginLeft: \"auto\",\n                  // marginRight: \"auto\",\n                  // left: 0,\n                  // right: 0,\n                  // textAlign: \"center\",\n                  // zindex: 9,\n                  width: \"100%\",\n                  // height: \"auto\",\n                }} \n                />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}